/*=========================================================================

  Name:        vtkSpaceNavigatorStyleCamera.h

  Author:      Alexis YL Chan

  Copyright:   The Renaissance Computing Institute (RENCI)

  License:     Licensed under the RENCI Open Source Software License v. 1.0.
               
               See included License.txt or 
               http://www.renci.org/resources/open-source-software-license
               for details.

=========================================================================*/
// .NAME vtkSpaceNavigatorStyleCamera
// .SECTION Description
// vtkSpaceNavigatorStyleCamera moves the current active representation based on analog and
// button events generated by a SpaceNavigator using the Virtual Reality 
// Peripheral Network (VRPN: http://www.cs.unc.edu/Research/vrpn/).  
//
// .SECTION see also
// vtkDeviceInteractor vtkInteractionDevice

#ifndef __vtkSpaceNavigatorStyleCamera_h
#define __vtkSpaceNavigatorStyleCamera_h

#include "vtkInteractionDeviceConfigure.h"

#include "vtkSpaceNavigatorStyle.h"
#include <QObject>

class VTK_INTERACTIONDEVICE_EXPORT vtkSpaceNavigatorStyleCamera : public vtkSpaceNavigatorStyle, public QObject
{
  Q_OBJECT
  typedef QObject Superclass;
public:
  static vtkSpaceNavigatorStyleCamera* New();
 // vtkTypeRevisionMacro(vtkSpaceNavigatorStyleCamera,vtkSpaceNavigatorStyle);
  void PrintSelf(ostream&, vtkIndent); 

  // Description:
  // Perform interaction based on an event
  virtual void OnEvent(vtkObject* caller, unsigned long eid, void* callData);

  // Description:
  // Set/get sensitivity parameters
  vtkSetMacro(TranslateSensitivity,double);
  vtkGetMacro(TranslateSensitivity,double);
  vtkSetMacro(RotateSensitivity,double);
  vtkGetMacro(RotateSensitivity,double);
signals:
  void UpdateVTKObject(double XPos, double YPos, double ZPos, double XRotate, double YRotate, double ZRotate);


protected:
  vtkSpaceNavigatorStyleCamera();
  ~vtkSpaceNavigatorStyleCamera();

  virtual void OnAnalog(vtkVRPNAnalog*);
  virtual void OnButton(vtkVRPNButton*);

  double TranslateSensitivity;
  double RotateSensitivity;

  double XPos;
  double YPos;
  double ZPos;
  double XRotate;
  double YRotate;
  double ZRotate;
  // Description:
  // Perform a translate interaction
  void Translate(double xDelta, double yDelta, double zDelta);
  // Perform a rotate interaction
  void Rotate(double xDelta, double yDelta, double zDelta);

private:
  vtkSpaceNavigatorStyleCamera(const vtkSpaceNavigatorStyleCamera&);  // Not implemented.
  void operator=(const vtkSpaceNavigatorStyleCamera&);  // Not implemented.
};

#endif

