/*=========================================================================

  Name:        vtkRenciMultiTouchStyle.h

  Author:      David Borland, The Renaissance Computing Institute (RENCI)

  Copyright:   The Renaissance Computing Institute (RENCI)

  License:     Licensed under the RENCI Open Source Software License v. 1.0.
               
               See included License.txt or 
               http://www.renci.org/resources/open-source-software-license
               for details.

=========================================================================*/
// .NAME vtkRenciMultiTouchStyle
// .SECTION Description
// vtkRenciMultiTouchStyle is an abstract base class for creating
// interaction based on events generated by multi-touch devices developed 
// at Renci (http://vis.renci.org/multitouch/). 

// .SECTION see also
// vtkDeviceInteractor vtkInteractionDevice

#ifndef __vtkRenciMultiTouchStyle_h
#define __vtkRenciMultiTouchStyle_h

#include "vtkInteractionDeviceConfigure.h"

#include "vtkDeviceInteractorStyle.h"

#include "vtkRenciMultiTouch.h"

class VTK_INTERACTIONDEVICE_EXPORT vtkRenciMultiTouchStyle : public vtkDeviceInteractorStyle
{
public:
  vtkTypeRevisionMacro(vtkRenciMultiTouchStyle,vtkDeviceInteractorStyle);
  void PrintSelf(ostream&, vtkIndent); 

  // Description:
  // Set the tracker receiving events from
  void SetMultiTouch(vtkRenciMultiTouch*);

protected:
  vtkRenciMultiTouchStyle();
  ~vtkRenciMultiTouchStyle();

  // Description:
  // These methods should be overloaded as needed in derived classes
  virtual void OnOneTouch(vtkRenciMultiTouch*) {}
  virtual void OnOneDrag(vtkRenciMultiTouch*) {}
  virtual void OnTwoTouch(vtkRenciMultiTouch*) {}
  virtual void OnTwoDrag(vtkRenciMultiTouch*) {}
  virtual void OnThreeTouch(vtkRenciMultiTouch*) {}
  virtual void OnThreeDrag(vtkRenciMultiTouch*) {}
  virtual void OnFourTouch(vtkRenciMultiTouch*) {}
  virtual void OnFourDrag(vtkRenciMultiTouch*) {}
  virtual void OnFiveTouch(vtkRenciMultiTouch*) {}
  virtual void OnFiveDrag(vtkRenciMultiTouch*) {}
  virtual void OnSixTouch(vtkRenciMultiTouch*) {}
  virtual void OnSixDrag(vtkRenciMultiTouch*) {}
  virtual void OnZoom(vtkRenciMultiTouch*) {}
  virtual void OnTranslateX(vtkRenciMultiTouch*) {}
  virtual void OnTranslateY(vtkRenciMultiTouch*) {}  
  virtual void OnTranslateZ(vtkRenciMultiTouch*) {}
  virtual void OnRotateX(vtkRenciMultiTouch*) {}
  virtual void OnRotateY(vtkRenciMultiTouch*) {}
  virtual void OnRotateZ(vtkRenciMultiTouch*) {}
  virtual void OnRelease(vtkRenciMultiTouch*) {}

private:
  vtkRenciMultiTouchStyle(const vtkRenciMultiTouchStyle&);  // Not implemented.
  void operator=(const vtkRenciMultiTouchStyle&);  // Not implemented.
};

#endif